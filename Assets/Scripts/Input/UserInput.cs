//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Settings/UserInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Gameplay.Inputs
{
    public partial class @UserInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @UserInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInput"",
    ""maps"": [
        {
            ""name"": ""Translate"",
            ""id"": ""87d4f1e7-8b7d-4ae0-a6dd-b7679f6181b6"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""9bbe3d5a-02c7-4f45-b69d-99de40428028"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ed0030c4-0363-435c-9196-d2d730160243"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""96b19720-b902-4584-aa02-33f0a0183b46"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""423cbd7a-9116-498b-9000-d9c86d39565c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b853665a-13f6-44c8-ba26-7c20f36b8219"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7dba0d51-e338-49e9-b3ce-3164a428dd6c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Actions"",
            ""id"": ""41cd293a-07dc-4478-9981-f34d7792f62e"",
            ""actions"": [
                {
                    ""name"": ""PrimaryAction"",
                    ""type"": ""Button"",
                    ""id"": ""c9b45f00-aac6-4971-b498-d1aceb1dc847"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryAction"",
                    ""type"": ""Button"",
                    ""id"": ""b82e3591-1452-4a54-8ea7-ad4d59a9ac9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeWeapon"",
                    ""type"": ""Value"",
                    ""id"": ""68560812-ff3c-4c3b-9194-00de9dc7804a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""cf6be14d-0b83-4184-929b-08bec084c999"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""bdaa43f1-5555-4095-b556-50ace25b657c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d9a67926-d99b-47aa-832b-a445338a289b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls"",
                    ""action"": ""PrimaryAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea0b3296-a516-43f6-b815-163b3e8d4c80"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls"",
                    ""action"": ""PrimaryAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a21dd78-5e4d-4597-9e41-11ca4773477f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls"",
                    ""action"": ""SecondaryAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee894d54-0594-45f0-9afb-2319e70075ca"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls"",
                    ""action"": ""SecondaryAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4625678f-6365-41ad-8738-96aa7c6b0cb3"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls"",
                    ""action"": ""ChangeWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5f77318-b51a-4069-a561-909fe9ec6b5b"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e1b3797-b30d-4dde-a474-31b7ef115eca"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Look"",
            ""id"": ""1d68c748-5b5c-45d0-94b0-a726bcd3786f"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""e73d8478-1753-41a5-907c-ddb47e08683e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""Value"",
                    ""id"": ""4fc339c4-db4e-4433-a887-a9a4b382e85e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""264f1e25-67c7-47f4-90ec-a0431c7e25c7"",
                    ""path"": ""<Mouse>/position/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00250410-9e2c-4365-9a23-86bfacdea2b5"",
                    ""path"": ""<Mouse>/position/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0219aa4-d70d-4f9a-a92a-cfe45ab84391"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controls"",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Controls"",
            ""bindingGroup"": ""Controls"",
            ""devices"": []
        }
    ]
}");
            // Translate
            m_Translate = asset.FindActionMap("Translate", throwIfNotFound: true);
            m_Translate_Move = m_Translate.FindAction("Move", throwIfNotFound: true);
            // Actions
            m_Actions = asset.FindActionMap("Actions", throwIfNotFound: true);
            m_Actions_PrimaryAction = m_Actions.FindAction("PrimaryAction", throwIfNotFound: true);
            m_Actions_SecondaryAction = m_Actions.FindAction("SecondaryAction", throwIfNotFound: true);
            m_Actions_ChangeWeapon = m_Actions.FindAction("ChangeWeapon", throwIfNotFound: true);
            m_Actions_Jump = m_Actions.FindAction("Jump", throwIfNotFound: true);
            m_Actions_Crouch = m_Actions.FindAction("Crouch", throwIfNotFound: true);
            // Look
            m_Look = asset.FindActionMap("Look", throwIfNotFound: true);
            m_Look_MousePosition = m_Look.FindAction("MousePosition", throwIfNotFound: true);
            m_Look_MouseDelta = m_Look.FindAction("MouseDelta", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Translate
        private readonly InputActionMap m_Translate;
        private ITranslateActions m_TranslateActionsCallbackInterface;
        private readonly InputAction m_Translate_Move;
        public struct TranslateActions
        {
            private @UserInput m_Wrapper;
            public TranslateActions(@UserInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Translate_Move;
            public InputActionMap Get() { return m_Wrapper.m_Translate; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TranslateActions set) { return set.Get(); }
            public void SetCallbacks(ITranslateActions instance)
            {
                if (m_Wrapper.m_TranslateActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_TranslateActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_TranslateActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_TranslateActionsCallbackInterface.OnMove;
                }
                m_Wrapper.m_TranslateActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                }
            }
        }
        public TranslateActions @Translate => new TranslateActions(this);

        // Actions
        private readonly InputActionMap m_Actions;
        private IActionsActions m_ActionsActionsCallbackInterface;
        private readonly InputAction m_Actions_PrimaryAction;
        private readonly InputAction m_Actions_SecondaryAction;
        private readonly InputAction m_Actions_ChangeWeapon;
        private readonly InputAction m_Actions_Jump;
        private readonly InputAction m_Actions_Crouch;
        public struct ActionsActions
        {
            private @UserInput m_Wrapper;
            public ActionsActions(@UserInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @PrimaryAction => m_Wrapper.m_Actions_PrimaryAction;
            public InputAction @SecondaryAction => m_Wrapper.m_Actions_SecondaryAction;
            public InputAction @ChangeWeapon => m_Wrapper.m_Actions_ChangeWeapon;
            public InputAction @Jump => m_Wrapper.m_Actions_Jump;
            public InputAction @Crouch => m_Wrapper.m_Actions_Crouch;
            public InputActionMap Get() { return m_Wrapper.m_Actions; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ActionsActions set) { return set.Get(); }
            public void SetCallbacks(IActionsActions instance)
            {
                if (m_Wrapper.m_ActionsActionsCallbackInterface != null)
                {
                    @PrimaryAction.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnPrimaryAction;
                    @PrimaryAction.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnPrimaryAction;
                    @PrimaryAction.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnPrimaryAction;
                    @SecondaryAction.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnSecondaryAction;
                    @SecondaryAction.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnSecondaryAction;
                    @SecondaryAction.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnSecondaryAction;
                    @ChangeWeapon.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnChangeWeapon;
                    @ChangeWeapon.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnChangeWeapon;
                    @ChangeWeapon.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnChangeWeapon;
                    @Jump.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnJump;
                    @Crouch.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnCrouch;
                    @Crouch.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnCrouch;
                    @Crouch.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnCrouch;
                }
                m_Wrapper.m_ActionsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @PrimaryAction.started += instance.OnPrimaryAction;
                    @PrimaryAction.performed += instance.OnPrimaryAction;
                    @PrimaryAction.canceled += instance.OnPrimaryAction;
                    @SecondaryAction.started += instance.OnSecondaryAction;
                    @SecondaryAction.performed += instance.OnSecondaryAction;
                    @SecondaryAction.canceled += instance.OnSecondaryAction;
                    @ChangeWeapon.started += instance.OnChangeWeapon;
                    @ChangeWeapon.performed += instance.OnChangeWeapon;
                    @ChangeWeapon.canceled += instance.OnChangeWeapon;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @Crouch.started += instance.OnCrouch;
                    @Crouch.performed += instance.OnCrouch;
                    @Crouch.canceled += instance.OnCrouch;
                }
            }
        }
        public ActionsActions @Actions => new ActionsActions(this);

        // Look
        private readonly InputActionMap m_Look;
        private ILookActions m_LookActionsCallbackInterface;
        private readonly InputAction m_Look_MousePosition;
        private readonly InputAction m_Look_MouseDelta;
        public struct LookActions
        {
            private @UserInput m_Wrapper;
            public LookActions(@UserInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @MousePosition => m_Wrapper.m_Look_MousePosition;
            public InputAction @MouseDelta => m_Wrapper.m_Look_MouseDelta;
            public InputActionMap Get() { return m_Wrapper.m_Look; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(LookActions set) { return set.Get(); }
            public void SetCallbacks(ILookActions instance)
            {
                if (m_Wrapper.m_LookActionsCallbackInterface != null)
                {
                    @MousePosition.started -= m_Wrapper.m_LookActionsCallbackInterface.OnMousePosition;
                    @MousePosition.performed -= m_Wrapper.m_LookActionsCallbackInterface.OnMousePosition;
                    @MousePosition.canceled -= m_Wrapper.m_LookActionsCallbackInterface.OnMousePosition;
                    @MouseDelta.started -= m_Wrapper.m_LookActionsCallbackInterface.OnMouseDelta;
                    @MouseDelta.performed -= m_Wrapper.m_LookActionsCallbackInterface.OnMouseDelta;
                    @MouseDelta.canceled -= m_Wrapper.m_LookActionsCallbackInterface.OnMouseDelta;
                }
                m_Wrapper.m_LookActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @MousePosition.started += instance.OnMousePosition;
                    @MousePosition.performed += instance.OnMousePosition;
                    @MousePosition.canceled += instance.OnMousePosition;
                    @MouseDelta.started += instance.OnMouseDelta;
                    @MouseDelta.performed += instance.OnMouseDelta;
                    @MouseDelta.canceled += instance.OnMouseDelta;
                }
            }
        }
        public LookActions @Look => new LookActions(this);
        private int m_ControlsSchemeIndex = -1;
        public InputControlScheme ControlsScheme
        {
            get
            {
                if (m_ControlsSchemeIndex == -1) m_ControlsSchemeIndex = asset.FindControlSchemeIndex("Controls");
                return asset.controlSchemes[m_ControlsSchemeIndex];
            }
        }
        public interface ITranslateActions
        {
            void OnMove(InputAction.CallbackContext context);
        }
        public interface IActionsActions
        {
            void OnPrimaryAction(InputAction.CallbackContext context);
            void OnSecondaryAction(InputAction.CallbackContext context);
            void OnChangeWeapon(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnCrouch(InputAction.CallbackContext context);
        }
        public interface ILookActions
        {
            void OnMousePosition(InputAction.CallbackContext context);
            void OnMouseDelta(InputAction.CallbackContext context);
        }
    }
}
